/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as Types from "./context"
import { FieldAuthorizeResolver } from "@nexus/schema/dist/plugins/fieldAuthorizePlugin"
import { core } from "@nexus/schema"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    upload<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Upload";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    upload<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Upload";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Upload: any
}

export interface NexusGenRootTypes {
  Category: { // root type
    id: number; // Int!
    name: string; // String!
  }
  Item: { // root type
    id: number; // Int!
    image?: string | null; // String
    name: string; // String!
    note?: string | null; // String
  }
  List: { // root type
    id: number; // Int!
    name: string; // String!
  }
  ListItem: { // root type
    count: number; // Int!
    itemId: number; // Int!
    listId: number; // Int!
  }
  Mutation: {};
  Query: {};
  UploadedFile: { // root type
    filename: string; // String!
    uri: string; // String!
  }
  User: { // root type
    activeListId?: number | null; // Int
    id: number; // Int!
    username: string; // String!
  }
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
  Upload: NexusGenScalars['Upload'];
}

export interface NexusGenFieldTypes {
  Category: { // field return type
    id: number; // Int!
    name: string; // String!
  }
  Item: { // field return type
    category: NexusGenRootTypes['Category'] | null; // Category
    id: number; // Int!
    image: string | null; // String
    name: string; // String!
    note: string | null; // String
  }
  List: { // field return type
    id: number; // Int!
    items: NexusGenRootTypes['ListItem'][]; // [ListItem!]!
    name: string; // String!
  }
  ListItem: { // field return type
    category: NexusGenRootTypes['Category'] | null; // Category
    count: number; // Int!
    itemId: number; // Int!
    listId: number; // Int!
    name: string; // String!
  }
  Mutation: { // field return type
    createCategory: NexusGenRootTypes['Category'] | null; // Category
    createItem: NexusGenRootTypes['Item'] | null; // Item
    createList: NexusGenRootTypes['List'] | null; // List
    deleteCategory: NexusGenRootTypes['Category'] | null; // Category
    deleteItem: NexusGenRootTypes['Item'] | null; // Item
    deleteList: NexusGenRootTypes['List'] | null; // List
    signin: NexusGenRootTypes['User'] | null; // User
    signout: boolean | null; // Boolean
    signup: NexusGenRootTypes['User'] | null; // User
    updateCategory: NexusGenRootTypes['Category'] | null; // Category
    updateItem: NexusGenRootTypes['Item'] | null; // Item
    updateList: NexusGenRootTypes['List'] | null; // List
  }
  Query: { // field return type
    categories: NexusGenRootTypes['Category'][]; // [Category!]!
    items: NexusGenRootTypes['Item'][]; // [Item!]!
    lists: NexusGenRootTypes['List'][]; // [List!]!
    me: NexusGenRootTypes['User'] | null; // User
  }
  UploadedFile: { // field return type
    filename: string; // String!
    uri: string; // String!
  }
  User: { // field return type
    activeListId: number | null; // Int
    categories: NexusGenRootTypes['Category'][]; // [Category!]!
    id: number; // Int!
    items: NexusGenRootTypes['Item'][] | null; // [Item!]
    lists: NexusGenRootTypes['List'][] | null; // [List!]
    username: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Category: { // field return type name
    id: 'Int'
    name: 'String'
  }
  Item: { // field return type name
    category: 'Category'
    id: 'Int'
    image: 'String'
    name: 'String'
    note: 'String'
  }
  List: { // field return type name
    id: 'Int'
    items: 'ListItem'
    name: 'String'
  }
  ListItem: { // field return type name
    category: 'Category'
    count: 'Int'
    itemId: 'Int'
    listId: 'Int'
    name: 'String'
  }
  Mutation: { // field return type name
    createCategory: 'Category'
    createItem: 'Item'
    createList: 'List'
    deleteCategory: 'Category'
    deleteItem: 'Item'
    deleteList: 'List'
    signin: 'User'
    signout: 'Boolean'
    signup: 'User'
    updateCategory: 'Category'
    updateItem: 'Item'
    updateList: 'List'
  }
  Query: { // field return type name
    categories: 'Category'
    items: 'Item'
    lists: 'List'
    me: 'User'
  }
  UploadedFile: { // field return type name
    filename: 'String'
    uri: 'String'
  }
  User: { // field return type name
    activeListId: 'Int'
    categories: 'Category'
    id: 'Int'
    items: 'Item'
    lists: 'List'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createCategory: { // args
      name: string; // String!
    }
    createItem: { // args
      categoryId: number; // Int!
      image?: NexusGenScalars['Upload'] | null; // Upload
      name: string; // String!
      note?: string | null; // String
    }
    createList: { // args
      items?: number[] | null; // [Int!]
      name: string; // String!
    }
    deleteCategory: { // args
      id: number; // Int!
    }
    deleteItem: { // args
      itemId: number; // Int!
    }
    deleteList: { // args
      id: number; // Int!
    }
    signin: { // args
      password: string; // String!
      username: string; // String!
    }
    signup: { // args
      password: string; // String!
      username: string; // String!
    }
    updateCategory: { // args
      id: number; // Int!
      name: string; // String!
    }
    updateItem: { // args
      categoryId?: number | null; // Int
      image?: NexusGenScalars['Upload'] | null; // Upload
      itemId: number; // Int!
      name?: string | null; // String
      note?: string | null; // String
    }
    updateList: { // args
      add?: number[] | null; // [Int!]
      delete?: number[] | null; // [Int!]
      id: number; // Int!
      name?: string | null; // String
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Category" | "Item" | "List" | "ListItem" | "Mutation" | "Query" | "UploadedFile" | "User";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String" | "Upload";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Types.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginSchemaConfig {
  }
}